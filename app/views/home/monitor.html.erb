<%= render 'layouts/page_header', :title => 'Chat Monitor', :icon => 'fa-comments' %>

<div class="row">
  <div class="col-sm-4">
    <div class="jarviswidget" id="your-chats">

      <header role="heading">
        <h2> <%= current_agent.display_name %></h2>
        <div class="widget-toolbar">
          <%= render 'agent_status'%>
        </div>
      </header>

      <div role="content">
        <div class="widget-body no-padding">
          <div class="people-container">
            <p class="people-header">Current Chats</p>
            <div id="current-chat-container">
              <%= image_tag "select2-spinner.gif" %>
            </div>

            <p class="people-header">Waiting to Chat</p>
            <div id="waiting-to-chat-container">
              <%= image_tag "select2-spinner.gif" %>
            </div>

            <p class="people-header">Visitors</p>
            <div id="visitor-container">
              <%= image_tag "select2-spinner.gif" %>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="col-sm-8">
    <div id="no-active-chat" class-"no-chats">
      <div class="jarviswidget" id="your-chats" data-widget-editbutton="false" data-widget-fullscreenbutton="false">

        <header role="heading">
          <span class="widget-icon"> <i class="fa fa-comments"></i> </span>
          <h2> No Active Chats </h2>
        </header>

        <div role="content">
          <div class="widget-body widget-hide-overflow">
            <h4>No Active Chats</h4>
          </div>
        </div>
      </div>
    </div>

    <div class="tab-content" id="active-chat-tabs" style="display: none;">
      <div class="tab-pane active" id="hr1">

        <div class="tabbable tabs-below" id="tabs">
          <div class="tab-content">

          </div>
          <ul class="nav nav-tabs">

          </ul>
        </div>
      </div>
    </div>
  </div>
</div>

<div style="display: none;">

  <div id="confirmCloseTab" title="Close this chat tab?">
    <p><span class="ui-icon ui-icon-alert" style="float:left; margin:0 7px 20px 0;"></span>Are you sure you want to close
      this chat tab?  <b>Warning: if this chat is active, closing the tab will cancel the chat.</b></p>
  </div>

  <div id="confirmInvite" title="Invite selected visitor?">
    <p><span class="ui-icon ui-icon-alert" style="float:left; margin:0 7px 20px 0;"></span>Are you sure you
    want to send this website visitor a chat invitation popup?</p>
  </div>

  <div id="chat-invite-unavailable" title="Chat Invite Unavailable">
    <p>Only paid accounts have access to the chat invitation features.  Please upgrade your account to access
    this and many more features.</p>
  </div>

</div>


<div id="audio-settings-dialog" title="Audio Settings" class="ui-dialog" style="display: none;">

	<form>
		<h5>Alert me with a sound when:</h5>
		<p style="padding-left: 10px;">
			<label for="active_chat_sound">A new message arrives in the selected chat</label>
			<input type="checkbox" name="active_chat_sound" id="active_chat_sound" class="text ui-widget-content ui-corner-all" />
		</p>
		<p style="padding-left: 10px;">
			<label for="background_chat_sound">A new message arrives in a background chat</label>
			<input type="checkbox" name="background_chat_sound" id="background_chat_sound"  class="checkbox ui-widget-content ui-corner-all" />
		</p>
		<p style="padding-left: 10px;">
			<label for="visitor_arrived_sound">A new visitor arrives on the website</label>
			<input type="checkbox" name="visitor_arrived_sound" id="visitor_arrived_sound"  class="checkbox ui-widget-content ui-corner-all" />
		</p>
	</form>
</div>

<script>

(function(ProvideChat, $,undefined) {
  "use strict";

  ProvideChat.agent_id = 0;
  ProvideChat.agent_name = '';
  ProvideChat.organization_id = 0;

  ProvideChat.activeChatId = 0;	// the chat id of the currently active tab
  ProvideChat.activeChats = [];	// associate array linking tab# to chatId - activeChats[tab#] = chatId

  ProvideChat.tabChatIds = [];	// associate array linking chatId to tab# - tabChatIds[chatId] = tab#
  ProvideChat.tabVisitorIds = [];	// associate array linking visitorId to tab# - tabVisitorIds[tab#] = visitorId
  ProvideChat.chatStatus = [];	// associate array holding the status of all active chats - chatStatus[chatId] = status

  ProvideChat.chatTimer = [];	// array of timers for each active chat - chatTimer[chatId]
  ProvideChat.keypressStatusTimer = [];	// array of timers for getting the keypress status of each active chat: keypressStatusTimer[chatId]
  ProvideChat.keypressMsgTimer = [];		// array of timers for monitoring the keypress state for the operator: keypressMsgTimer[chatId]
  ProvideChat.keypressStatus = [];		// array of keypress statuses for each active chat: keypressStatus[chatId]
  ProvideChat.visitorTimer;	// timer that controls the visitor info updates

  ProvideChat.numChats = 0;

  ProvideChat.init = function (agent_id, agent_name, organization_id) {
    ProvideChat.agent_id = agent_id;
    ProvideChat.agent_name = agent_name;
    ProvideChat.organization_id = organization_id;

    loadCurrentChats();
    updateVisitors();

    ProvideChat.visitorTimer = setInterval(function(){updateVisitors();}, 2000);
  };

  function loadCurrentChats () {

    var json_data = { "method": 'get_current_chats', "agent_id": ProvideChat.agent_id };

    $.getJSON("/api/chat_monitor.json", json_data, function (response) {

      $.each(response.current_chats, function(i, current_chat) {
        startChat( current_chat.visitor_id );
      });
    });
  }

  function updateVisitors () {

    $.getJSON("/visitors.json", function (results) {

      var in_chat = 0;
      var waiting_to_chat = 0;
      var visitors = 0;

      $.each(results, function(i, visitor) {
        console.log(visitor);

        if ($("#visitor-" + visitor.id).length === 0) {
          $("#visitor-" + visitor.id).remove();
        }

        if (visitor.status == 'in_chat') {
          if (in_chat === 0) {
            $('#current-chat-container').html('');
          }
          $('#current-chat-container').append("<div id='visitor-" + visitor.id + "'>");
          $('#current-chat-container').append('<%= image_tag "monitor/current-chat.png", class: "visitor-image" %>');
          $('#current-chat-container').append(visitor.name + '&nbsp;');
          $('#current-chat-container').append('<a href="javascript:void(0);" id="view_visitor_' + visitor.id + '" data-visitor-id="' + visitor.id + '" class="btn btn-default btn-xs"><i class="fa fa-user"></i> View</a>');
          $('#current-chat-container').append('<br /><span class="visitor-detail">Chatting for ' + visitor.time_in_chat + '</span>');
          $('#current-chat-container').append("</div>");
          in_chat++;

          $('#view_visitor_' + visitor.id).click(function() {
            startChat($(this).data("visitor-id"));
          });
        }
        else if (visitor.status == 'waiting_to_chat') {
          if (waiting_to_chat === 0) {
            $('#waiting-to-chat-container').html('');
          }
          $('#waiting-to-chat-container').append("<div id='visitor-" + visitor.id + "'>");
          $('#waiting-to-chat-container').append('<%= image_tag "monitor/waiting-to-chat.png", class: "visitor-image" %>');
          $('#waiting-to-chat-container').append(visitor.name + '&nbsp;');
          $('#waiting-to-chat-container').append('<a href="javascript:void(0);" id="accept_chat_' + visitor.id + '" data-visitor-id="' + visitor.id + '" class="btn btn-default btn-xs"><i class="fa fa-comments-o"></i> Accept</a>')
          $('#waiting-to-chat-container').append('<br /><span class="visitor-detail">Waiting for ' + visitor.time_waiting_to_chat + '</span>');
          $('#waiting-to-chat-container').append("</div>");

          $('#accept_chat_' + visitor.id).click(function() {
            startChat($(this).data("visitor-id"));
          });

          waiting_to_chat++;
        }
        else if (visitor.status == 'no_chat') {
          if (visitors === 0) {
            $('#visitor-container').html('');
          }
          $('#visitor-container').append("<div id='visitor-" + visitor.id + "'>");
          $('#visitor-container').append('<%= image_tag "monitor/visitor-browsing.png", class: "visitor-image" %>');
          $('#visitor-container').append(visitor.region_name + ', ' + visitor.country_name + '&nbsp;');
          $('#visitor-container').append('<a href="javascript:void(0);" id="invite_chat_' + visitor.id + '" data-visitor-id="' + visitor.id + '" class="btn btn-default btn-xs"><i class="fa fa-external-link"></i> Invite</a>');
          $('#visitor-container').append('<br /><span class="visitor-detail">' + visitor.current_page + '</span>');
          $('#visitor-container').append("</div>");
          visitors++;
        }
      });

      if (in_chat === 0) {
        $('#current-chat-container').html("<p>No current chats</p>");
      }
      if (waiting_to_chat === 0) {
        $('#waiting-to-chat-container').html("<p>No one waiting</p>");
      }

      if (visitors === 0) {
        $('#visitor-container').html("<p>No visitors</p>");
      }
    });
  }

  function processVisitorName(visitor) {
    var visitor_name = '';

    if (visitor.name) {
      visitor_name = visitor.name;
    } else {
      if (visitor.remote_host == 'Unknown Host') {
        visitor_name = visitor.remote_addr;
      } else {
        visitor_name = visitor.remote_host + " (" + visitor.remote_addr + ")";
      }
    }

    return visitor_name;
  }

  function processVisitorLocation(visitor) {
    var visitor_location = '';

    if (visitor.chat.status == 'visitorTimeout') {
      visitor_location =  "Visitor timed out, no longer on site";
    } else if (visitor.chat.status == 'operatorTimeout') {
      visitor_location =  "Chat not accepted, visitor sent to unavailable window";
    } else {
      if (visitor.current_page.length > 0) {
        visitor_location =  visitor.current_page;
      }
      else {
        visitor_location =  "Unknown";
      }
    }
    return visitor_location;
  }

  function processVisitorStatus(visitor) {

    var chat_status = '';

    if (visitor.status == 'offsite') {
      chat_status = "Left the site";
    } else if (visitor.status == 'no_chat') {
      chat_status = "Browsing for " + visitor.time_since_created;
    } else if (visitor.status == 'waiting_to_chat') {
      chat_status = "Waiting for " + visitor.time_waiting_to_chat;
    } else if (visitor.status == 'in_chat') {
      chat_status = "Chatting for " + visitor.time_in_chat;
    } else if (visitor.status == 'chat_ended') {
      chat_status = "Chat ended " + visitor.time_since_chat + " ago";
    }

    return chat_status;
  }

  function processAgent(visitor) {
    if (visitor.chat_status == 'in_chat') {
      return visitor.agent.display_name;
    } else {
      return "None";
    }
  }

  function processDepartmentName(visitor) {
    var department = '';
    if (visitor.department) {
      department = visitor.department;
    } else {
      department = "Not specified";
    }

    return department;
  }

  function viewVisitor( visitor_id ) {

    $.getJSON("/visitors/" + visitor_id + ".json", {}, function (response) {
      var visitor = response.visitor;

      console.log (visitor);

      var visitorInfo = '';

      visitorInfo += '<p><b>Email: </b>' + visitor.email + '</p>';
      visitorInfo += '<p><b>Department: </b>' + visitor.department + '</p>';
      visitorInfo += '<p><b>Initial Question: </b>' + visitor.question + '</p>';
      visitorInfo += '<p><b>IP Address: </b>' + visitor.ip_address + '</p>';
      visitorInfo += '<p><b>Pages Viewed: </b>' + visitor.page_views + '</p>';
      visitorInfo += '<p><b>Time on Site: </b>' + visitor.timeDiff + '</p>';
      visitorInfo += '<p><b>Country: </b>' + visitor.country_name + '&nbsp;&nbsp;<img width="32" height="32" src="/images/flags/' + visitor.country_code + '.png"></p>';
      visitorInfo += '<p><b>Current Page: </b><a href="' + visitor.current_page + '" target="_blank" style="color: #0066CC;">' + visitor.current_page + '</a></p>';
      visitorInfo += '<p><b>Location: </b>Latitude ' + visitor.latitude + ', Longitude ' + visitor.longitude + '</p>';
      visitorInfo += '<p<b>City: </b>' + visitor.city + '</p>';
      visitorInfo += '<p><b>Region: </b>' + visitor.region_name + ' (' + visitor.region_code + ')</p>';
      visitorInfo += '<p><b>Area Code: </b>' + visitor.area_code + '</p>';
      visitorInfo += '<p><b>Metro Code: </b>' + visitor.metro_code + '</p>';
      visitorInfo += '<p><b>ZipCode: </b>' + visitor.zipcode + '</p>';

      visitorInfo += '<h6>System Information</h6>';
      visitorInfo += '<p><b>Screen Resolution: </b>' + visitor.screen_resolution + '</p>';
      visitorInfo += '<p><b>Browser: </b>' + visitor.browser_name + '<img src="' + visitor.browserImg + '" height="16px" width="16px" hspace="3px"></p';
      visitorInfo += '<p><b>Browser Version: </b>' + visitor.browser_version + '</p>';
      visitorInfo += '<p><b>Operating System: </b>' + visitor.operating_system + '<img src="' + visitor.osImg + '" height="16px" width="16px" hspace="3px"></p>';

      $('#visitor-info-' + visitor_id).html(visitorInfo);
    });
  }

  function startChat( visitor_id ) {

    //console.log("START CHAT: " + visitor);
    //soundManager.stop('ringing');

    //clearInterval(soundTimer);
    //soundTimer = null;

    //acceptChatOff();
    //endChatOn(visitor.chat_id);

    var msg = 'Chat has begun, click end chat button when done';
    var title = 'Chat Initiated';
    //displayMessage(title, msg);

    var json_data = { "method": 'accept_chat', "agent_id": ProvideChat.agent_id, "visitor_id": visitor_id, "agent_name": ProvideChat.agent_name };

    $.getJSON("/api/chat_monitor.json", json_data, function (response) {
      if (response.chat_id > 0) {
        ProvideChat.activeChatId = response.chat_id;
        if ($("#chat_tab_" + response.chat_id).length === 0) {
          add_new_tab (response.chat_id, response.visitor_id, response.visitor_name, 'inProgress');
        } else {
          $("#chat_tab_" + response.chat_id).tab('show');
        }
      }
    });
  }

  function add_new_tab(chat_id, visitor_id, visitor_name, chat_status) {

    var json_data = { "method": 'get_chat_tab', "chat_id": chat_id, "visitor_id": visitor_id, "visitor_name": visitor_name, "chat_status": chat_status };

    $.getJSON("/api/chat_monitor.json", json_data, function (response) {

      var tabNum = ProvideChat.numChats;
      ProvideChat.numChats++;	// increment the number of chats

      var id = $(".nav-tabs").children().length; //think about it ;)
      var tabId = 'chat_' + id;
      console.log(tabId);
      console.log(response.visitor_name);
      $('.tab-content').append('<div class="tab-pane" id="' + tabId + '">' + response.html + '</div>');
      $('.nav-tabs').append('<li><a data-toggle="tab" id="chat_tab_' + chat_id + '" href="#chat_' + id + '">' + response.visitor_name + '</a></li>');

      // add this
      $('.nav-tabs li:nth-child(' + id + ') a').click();

      if (ProvideChat.numChats == 1) {
        $("#no-active-chat").slideUp();
        $('#active-chat-tabs').show();
        $('#tabs').tab('show');
      }
      $('#tabs a:last').tab('show');

      ProvideChat.activeChats[tabNum] = response.chat_id;
      ProvideChat.tabVisitorIds[tabNum] = response.visitor_id;

      ProvideChat.tabChatIds[response.chat_id] = tabNum;
      ProvideChat.chatStatus[response.chat_id] = response.chat_status;

      getChatText( response.chat_id, true );

      ProvideChat.activeChatId = response.chat_id;

      $('#send-message-' + response.chat_id).click(function() {
        sendChatText(response.chat_id);
      });

      viewVisitor(visitor_id);

      ProvideChat.chatTimer[response.chat_id] = setInterval(function(){ getChatText(response.chat_id, false); }, 2000);
      ProvideChat.keypressStatusTimer[response.chat_id] = setInterval(function () { getKeypressStatus(response.chat_id); }, 1500);
    });
  }
  
  function setup_chat(chat_id) {
    if (ProvideChat.activeChatId == chat_id) {
      // Set the focus to the Message Box.
      $('#txt_message'+ProvideChat.activeChatId).focus();
    }

    $.shiftdown = false;
    $.ctrldown = false;

    $("#txt_message"+chat_id).keydown(function (e) {
      if (e.which === 16) {
        $.shiftdown = true;
      }
      if ((e.which === 17)) {
        $.ctrldown = true;
      }
    });

    $("#txt_message"+chat_id).keyup(function (e) {
      if (e.which === 16) {
        $.shiftdown = false;
      }
      if ((e.which === 17)) {
        $.ctrldown = false;
      }

      if ((e.which === 13) && (($.shiftdown === true) || ($.ctrldown === true))) {
        $("#txt_message"+chat_id).value += "\n";
      }
      else if (e.which === 13) {
        sendChatText( chat_id );
        updateKeypress(chat_id, 'no');
      } else {
        updateKeypress(chat_id, 'yes');
      }
    });
  }

  //Gets the current messages from the server
  function getChatText( chat_id, get_all_messages ) {

    var json_data = { "method": 'get_chat_messages', "chat_id": chat_id, "agent_id": ProvideChat.agent_id, "context" : "unseen" };

    if (get_all_messages === true) {
      json_data.context = "all";
    }

    $.getJSON("/api/chat_monitor.json", json_data, function (response) {

      console.log(response);

      var chatText = '';
      var endChat = false;
      var newMessageAlert = false;

      if ((get_all_messages === true) || ($("#chat-messages-"+chat_id).length === 0)) {
        $("#chat-messages-"+chat_id).html('<div style="margin: 10px; font-family: Lucida Sans Unicode, verdana, helvetica;"><p>You are now chatting with ' + response.visitor_name + '</p></div><hr />');
      }

			// if we get some JSON messages returned then process and display them, otherwise
			// show the operator connection message

      ProvideChat.chatStatus[chat_id] = response.status;

      if (response.status === 'in_progress') {

        $.each(response.messages, function(count, message) {

          console.log("MESSAGE: ");
          console.log(message);
          
          var message_timestamp = new Date(message.sent);

          if (message.sender === 'agent')
          {
            chatText += '<li class="message"><div class="message-text">';
            chatText += '<time>' +  message_timestamp.getHours() + ':' + message_timestamp.getMinutes() + '</time>';
            chatText += '<a href="javascript:void(0);" class="username">' + message.user_name  + '</a> ' + message.message + '</li>';
          }
          else if (message.sender === "visitor")
          {
            chatText += '<li class="message"><div class="message-text">';
            chatText += '<time>' + message_timestamp.getHours() + ':' + message_timestamp.getMinutes() + '</time>';
            chatText += '<a href="javascript:void(0);" class="username">' + message.user_name  + '</a> ' + message.message + '</li>';

            $('#typingNotification' + chat_id).html ('');

            newMessageAlert = true;
          }
        });
      } else if ((response.status === 'agent_ended') || (response.status === 'visitor_ended') ||
                   (response.status === 'visitor_timeout'))
      {
        chatText = '<li class="message"><div class="message-text">';
        chatText += '<time>2014-01-13</time>';
        chatText += message.message +  '<br /><br /><b>Chat Statistics:</b><br />';
        chatText += 'Chat session started: ' + response.started + '<br />';
        chatText += 'Chat Session ended: ' + response.ended + '<br />';
        chatText += 'Total chat session duration: ' + response.duration + '</li>';

        endChat = true;

        //endChatOff();
      }

      $("#chat-messages-"+chat_id).append(chatText);
      $('#chat-messages-'+chat_id).scrollTop($('#chat-messages-'+chat_id).height());


      if (endChat === true) {
			  // Refresh chat in 2 seconds
        //chatTimer[chatId] = setTimeout(function(){ getChatText(chatId, false); }, 2000);
        clearInterval(ProvideChat.chatTimer[chat_id]);
        ProvideChat.chatTimer[chat_id] = null;
        clearTimeout(ProvideChat.keypressStatusTimer[chat_id]);
        ProvideChat.keypressStatusTimer[chat_id] = null;
        $('#typingNotification' + chat_id).html ('');
      }

      /*
      if ((newMessageAlert === true) && (chatStatus[chat_id] === 'inProgress')) {
				if (activeChatId != chatId)  {
					var msg = 'New Message from ' + msg_user;
					var title = 'New Message';
					displayMessage(title, msg);

					// Play new message sound for background chat
					if ($("#background_chat_sound").attr("checked") === true) {
						soundManager.play('new_message2');
					}
				} else {

					// Play new message sound for background chat
					if ($("#active_chat_sound").attr("checked") === true) {
						soundManager.play('new_message1');
					}
				}
      }
      */
    });
  }

  function getKeypressStatus(chat_id) {

    var json_data = { "method": 'get_visitor_typing', "chat_id": chat_id };

    $.getJSON("/api/chat_monitor.json", json_data, function (response) {
      var chat_id = response.chat_id;

      if (response.visitor_typing == 'yes' ) {
        $('#typingNotification' + chat_id).html ('<i>' + response.visitor_name + ' is typing...</i>');
      } else {
        $('#typingNotification' + chat_id).html ('');
      }
    });
  }


  //Add a message to the chat server.
  function sendChatText(chat_id) {

    if (ProvideChat.chatStatus[chat_id] === 'in_progress') {
      var message = $("#chat-message-content-" + chat_id).val();

      if ((message.length === 0) || (message === "%0A") || (message === "%0A%0D")) {
        $('#chat-message-content-' + chat_id).val('');
        $('#chat-message-content-' + chat_id).focus();
      } else {

        var msg_text = $('#chat-message-content-' + chat_id).val();

        msg_text = msg_text.replace(/\r?\n|\r/g, "<br>");

        var chatText = '<li class="message"><div class="message-text">';
        chatText += '<time>2014-01-13</time>';
        chatText += '<a href="javascript:void(0);" class="username">' + ProvideChat.agent_name  + '</a> ' + msg_text + '</li>';

        $("#chat-messages-"+chat_id).append(chatText);
        $('#chat-messages-'+chat_id).scrollTop($('#chat-messages-'+chat_id).height());

        $('#chat-message-content-' + chat_id).val('');
        $('#chat-message-content-' + chat_id).focus();

        var json_data = { "method" : "agent_message", "org_id" : ProvideChat.org_id, "website_id" : ProvideChat.website_id,
                          "chat_id": chat_id, "message" : message, "agent_name" : ProvideChat.agent_name };

        $.getJSON("/api/chat_monitor.json", json_data, function (response) {
          console.log(response);
        });

      }
    } else if (ProvideChat.chatStatus[chat_id] === 'not_started') {
      alert ("You must accept a chat before sending a message");
    } else if ((ProvideChat.chatStatus[chat_id] === 'agent_ended') || (ProvideChat.chatStatus[chat_id] === 'visitor_ended') ||
              (ProvideChat.chatStatus[chat_id] === 'agent_timeout') || (ProvideChat.chatStatus[chat_id] === 'visitor_timeout'))
    {
      alert ("This chat has now ended");
    }
  }

  function inviteVisitor(visitor_id)
  {
    var edition = $("#edition").val();

    if (edition === 'free') {
      $("#chat-invite-unavailable").dialog('open');
    } else {

      if (visitor_id > 0) {

        $.ajax({
          type: "POST",
          dataType: "json",
          url: "process-chat.php",
          data: "visitorId=" + visitor_id + "&operatorId=" + operatorId + "&action=send_invite",
          success: function (json) {

            if (json) {

              if (json.result === 'invitation_sent') {
                displayMessage('Invitation Sent!', 'You just sent a chat invitation to the selected visitor');
              } else if (json.result === 'invitation_already_sent') {
                displayMessage('Invitation Not Sent', 'This visitor has already been sent an invitation');
              } else if (json.result === 'operator_offline') {
                displayMessage('Invitation Not Sent', 'You need to be online in order to send an invitation');
              }

              inviteChatOff();
            }
          }
        });
      }
    }

    return true;
  }


  function end_chat(chat_id) {

    var json_data = { "method": 'end_chat', "chat_id": chat_id };

    $.getJSON("/api/chat_monitor.json", json_data, function (response) {
    });

    //endChatOff();
  }


  function updateKeypress(chat_id, keypressActive) {

    if (keypressStatus[chat_id] === keypressActive) {

      if (typeof keypressMsgTimer[chat_id] != 'undefined') {
        clearTimeout(keypressMsgTimer[chat_id]);
        keypressMsgTimer[chat_id] = null;
      }
      keypressMsgTimer[chat_id] = setTimeout(function () { updateKeypress(chat_id, 'no'); }, 3000); 

    } else {

      keypressStatus[chat_id] = keypressActive;

      $.ajax({
        type: "POST",
        dataType: "json",
        url: "process-chat.php",
        data: "action=update_keypress&user=operator&chatId=" + chat_id + "&keypressActive=" + keypressActive,
        success: function (json) {
          clearTimeout(keypressMsgTimer[chat_id]);
          keypressMsgTimer[chat_id] = null;
          keypressMsgTimer[chat_id] = setTimeout(function () { updateKeypress(chat_id, 'no'); }, 3000);

          result = null;
        }
      });
    }
  }

  function make_keyDown(e) {
    return function (e) {
      if (e.which === 16) {
        $.shiftdown = true;
      }
      if ((e.which === 17)) {
        $.ctrldown = true;
      }
    };
  }

  function make_keyUp (e, chatId) {
    return function (e) {
      if (e.which == 16) {
        $.shiftdown = false;
      }
      if ((e.which == 17)) {
        $.ctrldown = false;
      }

      if ((e.which === 13) && (($.shiftdown === true) || ($.ctrldown === true))) {
        $("#txt_message"+chatId).value += "\n";
      }
      else if (e.which == 13) {
        sendChatText( chatId );
        updateKeypress(chatId, 'no');
      } else {
        updateKeypress(chatId, 'yes');
      }

      e = null;
    };
  }

})(window.ProvideChat = window.ProvideChat || {}, jQuery);

$( document ).ready(function() {
  ProvideChat.init (<%= current_agent.id %>, '<%= current_agent.display_name %>', <%= current_agent.organization_id %>);
});

</script>